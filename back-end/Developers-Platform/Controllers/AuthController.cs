using Developers_Platform.Business.TokenService;
using Developers_Platform.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Developers_Platform.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : Controller
    {
        private readonly UserManager<User> _userManager;
        private readonly TokenService _tokenService;
        private readonly SignInManager<User> _signInManager;
        private readonly RoleManager<IdentityRole> _roleManager;
        public AuthController(
          UserManager<User> userManager,
          SignInManager<User> signInManager,
          RoleManager<IdentityRole> roleManager,
          TokenService tokenService
        )
        {
            _roleManager = roleManager;
            _signInManager = signInManager;
            _tokenService = tokenService;
            _userManager = userManager;
        }


        /// <param name="loginDTO"></param>
        /// <returns><see cref="UserAuthDto" /></returns>
        [HttpPost("login")]
        public async Task<ActionResult<UserAuthDto>> LoginUser(UserForLoginDto loginDto)
        {
            var email = loginDto.Email.ToLower().Trim();
            //Get user by email address
            var user = await _userManager.Users.Where(u => u.Email == email).FirstOrDefaultAsync();
            //Check user if null return BadRequest
            if (user == null) return BadRequest("Invalid Email");
            //Check user and password if matches return Success
            var result = await _signInManager.CheckPasswordSignInAsync(user, password: loginDto.Password, false);
            if (result.Succeeded)
            {
                //Get user login credentials.
                var roles = await _userManager.GetRolesAsync(user);
                return await UserToDto(user, roles.ToList());
            }
            return BadRequest("Invalid Password");
        }

        /// <param name="registerDto"></param>
        /// <returns><see cref="UserAuthDto" /></returns>
        [HttpPost("register")]
        public async Task<ActionResult<UserAuthDto>> RegisterUser(UserForRegisterDto registerDto)
        {
            var User = new User
            {
                //Autogenerated user id
                UserName = Guid.NewGuid().ToString(),
                Email = registerDto.Email.ToLower().Trim(),
                FirstName = registerDto.FirstName.Trim(),
                LastName = registerDto.LastName.Trim(),
                Gender = registerDto.Gender,
                Age = registerDto.Age,
                Country = registerDto.Country
            };
            var result = await _userManager.CreateAsync(User, password: registerDto.Password);
            if (!result.Succeeded) return BadRequest(result);

            var addToRoleResult = await _userManager.AddToRoleAsync(User, "Member");
            if (addToRoleResult.Succeeded)
            {
                var roles = await _userManager.GetRolesAsync(User);
                return await UserToDto(User, roles.ToList());
            }
            return BadRequest("Register failed.");
        }


        /// <param name="User"></param>
        /// <returns><see cref="UserAuthDto" /></returns>
        private async Task<UserAuthDto> UserToDto(User user, List<string> roles)
        {
            return new UserAuthDto
            {
                Id = user.Id,
                Email = user.Email,
                Token = await _tokenService.GenerateToken(user),
                Roles = roles,

            };
        }

    }
}
